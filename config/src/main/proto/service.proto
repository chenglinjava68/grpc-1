syntax = "proto3";

option java_package = "cn.sic777.protobuf"; //所在包名
option java_outer_classname = "Sic777Proto"; //最外层类名称
option java_multiple_files = true; //以外部类模式生成

//定义服务
service RpcDemo {
    //简单RPC: 客户端使用存根发送请求到服务器并等待响应返回，就像平常的函数调用一样。
    rpc SimpleRpc (RequestParams) returns (ResponseParams) {
    }
    //服务器端流式RPC: 客户端发送请求到服务器，拿到一个流去读取返回的消息序列，客户端读取返回的流，直到里面没有任何消息。
    //(通过在'响应'类型前插入'stream'关键字，可以指定一个服务器端的流方法)。
    rpc ServerRpc (RequestParams) returns (stream ResponseParams) {
    }
    //客户端流式RPC: 客户端写入一个消息序列并将其发送到服务器，同样也是使用流。一旦客户端完成写入消息，它等待服务器完成读取返回它的响应。
    //(通过在'请求'类型前指定'stream'关键字来指定一个客户端的流方法)。
    rpc ClientRpc (stream RequestParams) returns (ResponseParams) {
    }
    //双向流式RPC: 是双方使用读写流去发送一个消息序列。两个流独立操作，因此客户端和服务器可以以任意喜欢的顺序读写：
    //比如，服务器可以在写入响应前等待接收所有的客户端消息，或者可以交替的读取和写入消息，或者其他读写的组合。
    //每个流中的消息顺序被预留。
    //(通过在'请求'和'响应'前加'stream'关键字去制定方法的类型)。
    rpc duplexingRpc (stream RequestParams) returns (stream ResponseParams) {
    }
}

//请求参数
message RequestParams {
    string message = 1;
}

//返回参数
message ResponseParams {
    string message = 2;
}
